// ============================================================================
//   Ver  :| Author					:| Mod. Date :| Changes Made:
//   V1.1 :| Alexandra Du			:| 06/01/2016:| Added Verilog file
// ============================================================================


//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

`define ENABLE_ADC_CLOCK
`define ENABLE_CLOCK1
`define ENABLE_CLOCK2
`define ENABLE_SDRAM
`define ENABLE_HEX0
`define ENABLE_HEX1
`define ENABLE_HEX2
`define ENABLE_HEX3
`define ENABLE_HEX4
`define ENABLE_HEX5
`define ENABLE_KEY
`define ENABLE_LED
`define ENABLE_SW
`define ENABLE_VGA
`define ENABLE_ACCELEROMETER
`define ENABLE_ARDUINO
`define ENABLE_GPIO

module DE10_LITE_Golden_Top(

	//////////// ADC CLOCK: 3.3-V LVTTL //////////
`ifdef ENABLE_ADC_CLOCK
	input 		          		ADC_CLK_10,
`endif
	//////////// CLOCK 1: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK1
	input 		          		MAX10_CLK1_50,
`endif
	//////////// CLOCK 2: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK2
	input 		          		MAX10_CLK2_50,
`endif

	//////////// SDRAM: 3.3-V LVTTL //////////
`ifdef ENABLE_SDRAM
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,
`endif

	//////////// SEG7: 3.3-V LVTTL //////////
`ifdef ENABLE_HEX0
	output		     [7:0]		HEX0,
`endif
`ifdef ENABLE_HEX1
	output		     [7:0]		HEX1,
`endif
`ifdef ENABLE_HEX2
	output		     [7:0]		HEX2,
`endif
`ifdef ENABLE_HEX3
	output		     [7:0]		HEX3,
`endif
`ifdef ENABLE_HEX4
	output		     [7:0]		HEX4,
`endif
`ifdef ENABLE_HEX5
	output		     [7:0]		HEX5,
`endif

	//////////// KEY: 3.3 V SCHMITT TRIGGER //////////
`ifdef ENABLE_KEY
	input 		     [1:0]		KEY,
`endif

	//////////// LED: 3.3-V LVTTL //////////
`ifdef ENABLE_LED
	output		     [9:0]		LEDR,
`endif

	//////////// SW: 3.3-V LVTTL //////////
`ifdef ENABLE_SW
	input 		     [9:0]		SW,
`endif

	//////////// VGA: 3.3-V LVTTL //////////
`ifdef ENABLE_VGA
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,
`endif

	//////////// Accelerometer: 3.3-V LVTTL //////////
`ifdef ENABLE_ACCELEROMETER
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO,
`endif

	//////////// Arduino: 3.3-V LVTTL //////////
`ifdef ENABLE_ARDUINO
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,
`endif

	//////////// GPIO, GPIO connect to GPIO Default: 3.3-V LVTTL //////////
`ifdef ENABLE_GPIO
	inout 		    [35:0]		GPIO
`endif
);


//=======================================================
//  REG/WIRE declarations
//=======================================================
wire [3:0] user_digit1;          // First user input digit
wire [3:0] user_digit2;          // Second user input digit
wire user_verify;                // Signal to trigger answer verification
wire [6:0] display_segments[5:0]; // Array to hold segment data for each 7-segment display
wire correct;                    // Flag indicating if the answer is correct
wire [5:0] leds_output;          // LEDs indicating correct answers
//=======================================================
//  Structural coding
//=======================================================

// Instantiate the input handling module
input_handling user_input_handler (
    .clk(MAX10_CLK1_50),         // System clock
    .switches(SW[9:0]),          // Connect to the 10 switches
    .enter_button(KEY[1]),       // Connect to KEY1 for verification
    .digit1(user_digit1),        // Output the first digit of the answer
    .digit2(user_digit2),        // Output the second digit of the answer
    .verify(user_verify)         // Output the verification signal
);

// Instantiate the chess puzzle logic module
chess_puzzle_logic puzzle_logic_inst (
    .clk(MAX10_CLK1_50),           // System clock
    .user_digit1(user_digit1),     // First digit of user input
    .user_digit2(user_digit2),     // Second digit of user input
    .verify(user_verify),          // Verification signal
    .display_digit0(display_segments[0]), // First display digit
    .display_digit1(display_segments[1]), // Second display digit
    .display_digit2(display_segments[2]), // Third display digit
    .display_digit3(display_segments[3]), // Fourth display digit
    .correct(correct),             // Correctness of the solution
    .leds(leds_output)             // LEDs output
);


// Instantiate the seven segment display drivers for each digit
seven_seg_display_driver disp_drv0 (
    .binary_input(display_segments[0]),   // Connect to the first digit segment data
    .display(HEX5)                        // Connect to the first seven-segment display
);

seven_seg_display_driver disp_drv1 (
    .binary_input(display_segments[1]),   // Connect to the second digit segment data
    .display(HEX4)                        // Connect to the second seven-segment display
);

seven_seg_display_driver disp_drv2 (
    .binary_input(display_segments[2]),   // Connect to the third digit segment data
    .display(HEX3)                        // Connect to the third seven-segment display
);

seven_seg_display_driver disp_drv3 (
    .binary_input(display_segments[3]),   // Connect to the fourth digit segment data
    .display(HEX2)                        // Connect to the fourth seven-segment display
);

// Connect user input to HEX1 and HEX0
seven_seg_display_driver disp_drv4 (
    .binary_input(user_digit1),   // Connect to the user's first input digit
    .display(HEX1)                // Connect to HEX1 display
);

seven_seg_display_driver disp_drv5 (
    .binary_input(user_digit2),   // Connect to the user's second input digit
    .display(HEX0)                // Connect to HEX0 display
);

// Connect the LEDs output from the logic module to the physical LEDs
assign LEDR[5:0] = leds_output;




endmodule
